// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/analytics/clickhouse_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/analytics/clickhouse_repository.go -destination=mocks/analyticsmocks/clickhouse_repository_mock.go -package=analyticsmocks -typed
//

// Package analyticsmocks is a generated GoMock package.
package analyticsmocks

import (
	context "context"
	reflect "reflect"

	analytics "github.com/stneto1/teste-freterapido/internal/domain/analytics"
	gomock "go.uber.org/mock/gomock"
)

// MockClickhouseAnalyticsRepository is a mock of ClickhouseAnalyticsRepository interface.
type MockClickhouseAnalyticsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockClickhouseAnalyticsRepositoryMockRecorder
	isgomock struct{}
}

// MockClickhouseAnalyticsRepositoryMockRecorder is the mock recorder for MockClickhouseAnalyticsRepository.
type MockClickhouseAnalyticsRepositoryMockRecorder struct {
	mock *MockClickhouseAnalyticsRepository
}

// NewMockClickhouseAnalyticsRepository creates a new mock instance.
func NewMockClickhouseAnalyticsRepository(ctrl *gomock.Controller) *MockClickhouseAnalyticsRepository {
	mock := &MockClickhouseAnalyticsRepository{ctrl: ctrl}
	mock.recorder = &MockClickhouseAnalyticsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClickhouseAnalyticsRepository) EXPECT() *MockClickhouseAnalyticsRepositoryMockRecorder {
	return m.recorder
}

// GetMetrics mocks base method.
func (m *MockClickhouseAnalyticsRepository) GetMetrics(arg0 context.Context, LastQuotes uint64) ([]analytics.ServiceMetrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics", arg0, LastQuotes)
	ret0, _ := ret[0].([]analytics.ServiceMetrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockClickhouseAnalyticsRepositoryMockRecorder) GetMetrics(arg0, LastQuotes any) *MockClickhouseAnalyticsRepositoryGetMetricsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockClickhouseAnalyticsRepository)(nil).GetMetrics), arg0, LastQuotes)
	return &MockClickhouseAnalyticsRepositoryGetMetricsCall{Call: call}
}

// MockClickhouseAnalyticsRepositoryGetMetricsCall wrap *gomock.Call
type MockClickhouseAnalyticsRepositoryGetMetricsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClickhouseAnalyticsRepositoryGetMetricsCall) Return(arg0 []analytics.ServiceMetrics, arg1 error) *MockClickhouseAnalyticsRepositoryGetMetricsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClickhouseAnalyticsRepositoryGetMetricsCall) Do(f func(context.Context, uint64) ([]analytics.ServiceMetrics, error)) *MockClickhouseAnalyticsRepositoryGetMetricsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClickhouseAnalyticsRepositoryGetMetricsCall) DoAndReturn(f func(context.Context, uint64) ([]analytics.ServiceMetrics, error)) *MockClickhouseAnalyticsRepositoryGetMetricsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
