// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/quotes/frete_rapido_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/quotes/frete_rapido_repository.go -destination=mocks/quotesmocks/frete_rapido_repository_mock.go -package=quotesmocks -typed
//

// Package quotesmocks is a generated GoMock package.
package quotesmocks

import (
	context "context"
	reflect "reflect"

	quotes "github.com/stneto1/teste-freterapido/internal/domain/quotes"
	gomock "go.uber.org/mock/gomock"
)

// MockFreteRapidoQuotesRepository is a mock of FreteRapidoQuotesRepository interface.
type MockFreteRapidoQuotesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFreteRapidoQuotesRepositoryMockRecorder
	isgomock struct{}
}

// MockFreteRapidoQuotesRepositoryMockRecorder is the mock recorder for MockFreteRapidoQuotesRepository.
type MockFreteRapidoQuotesRepositoryMockRecorder struct {
	mock *MockFreteRapidoQuotesRepository
}

// NewMockFreteRapidoQuotesRepository creates a new mock instance.
func NewMockFreteRapidoQuotesRepository(ctrl *gomock.Controller) *MockFreteRapidoQuotesRepository {
	mock := &MockFreteRapidoQuotesRepository{ctrl: ctrl}
	mock.recorder = &MockFreteRapidoQuotesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFreteRapidoQuotesRepository) EXPECT() *MockFreteRapidoQuotesRepositoryMockRecorder {
	return m.recorder
}

// TryQuote mocks base method.
func (m *MockFreteRapidoQuotesRepository) TryQuote(arg0 context.Context, arg1 quotes.FreteRapidoRequestQuote) (quotes.FreteRapidoResponseQuote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryQuote", arg0, arg1)
	ret0, _ := ret[0].(quotes.FreteRapidoResponseQuote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryQuote indicates an expected call of TryQuote.
func (mr *MockFreteRapidoQuotesRepositoryMockRecorder) TryQuote(arg0, arg1 any) *MockFreteRapidoQuotesRepositoryTryQuoteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryQuote", reflect.TypeOf((*MockFreteRapidoQuotesRepository)(nil).TryQuote), arg0, arg1)
	return &MockFreteRapidoQuotesRepositoryTryQuoteCall{Call: call}
}

// MockFreteRapidoQuotesRepositoryTryQuoteCall wrap *gomock.Call
type MockFreteRapidoQuotesRepositoryTryQuoteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFreteRapidoQuotesRepositoryTryQuoteCall) Return(arg0 quotes.FreteRapidoResponseQuote, arg1 error) *MockFreteRapidoQuotesRepositoryTryQuoteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFreteRapidoQuotesRepositoryTryQuoteCall) Do(f func(context.Context, quotes.FreteRapidoRequestQuote) (quotes.FreteRapidoResponseQuote, error)) *MockFreteRapidoQuotesRepositoryTryQuoteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFreteRapidoQuotesRepositoryTryQuoteCall) DoAndReturn(f func(context.Context, quotes.FreteRapidoRequestQuote) (quotes.FreteRapidoResponseQuote, error)) *MockFreteRapidoQuotesRepositoryTryQuoteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
