// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/quotes/clickhouse_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/quotes/clickhouse_repository.go -destination=mocks/quotesmocks/clickhouse_repository_mock.go -package=quotesmocks -typed
//

// Package quotesmocks is a generated GoMock package.
package quotesmocks

import (
	context "context"
	reflect "reflect"

	quotes "github.com/stneto1/teste-freterapido/internal/domain/quotes"
	gomock "go.uber.org/mock/gomock"
)

// MockClickhouseQuotesRepository is a mock of ClickhouseQuotesRepository interface.
type MockClickhouseQuotesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockClickhouseQuotesRepositoryMockRecorder
	isgomock struct{}
}

// MockClickhouseQuotesRepositoryMockRecorder is the mock recorder for MockClickhouseQuotesRepository.
type MockClickhouseQuotesRepositoryMockRecorder struct {
	mock *MockClickhouseQuotesRepository
}

// NewMockClickhouseQuotesRepository creates a new mock instance.
func NewMockClickhouseQuotesRepository(ctrl *gomock.Controller) *MockClickhouseQuotesRepository {
	mock := &MockClickhouseQuotesRepository{ctrl: ctrl}
	mock.recorder = &MockClickhouseQuotesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClickhouseQuotesRepository) EXPECT() *MockClickhouseQuotesRepositoryMockRecorder {
	return m.recorder
}

// AddQuotes mocks base method.
func (m *MockClickhouseQuotesRepository) AddQuotes(arg0 context.Context, arg1 []quotes.Quote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddQuotes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddQuotes indicates an expected call of AddQuotes.
func (mr *MockClickhouseQuotesRepositoryMockRecorder) AddQuotes(arg0, arg1 any) *MockClickhouseQuotesRepositoryAddQuotesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuotes", reflect.TypeOf((*MockClickhouseQuotesRepository)(nil).AddQuotes), arg0, arg1)
	return &MockClickhouseQuotesRepositoryAddQuotesCall{Call: call}
}

// MockClickhouseQuotesRepositoryAddQuotesCall wrap *gomock.Call
type MockClickhouseQuotesRepositoryAddQuotesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClickhouseQuotesRepositoryAddQuotesCall) Return(arg0 error) *MockClickhouseQuotesRepositoryAddQuotesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClickhouseQuotesRepositoryAddQuotesCall) Do(f func(context.Context, []quotes.Quote) error) *MockClickhouseQuotesRepositoryAddQuotesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClickhouseQuotesRepositoryAddQuotesCall) DoAndReturn(f func(context.Context, []quotes.Quote) error) *MockClickhouseQuotesRepositoryAddQuotesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
