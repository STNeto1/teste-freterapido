// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package quotes_test

import (
	"context"

	"github.com/stneto1/teste-freterapido/internal/domain/quotes"
	mock "github.com/stretchr/testify/mock"
)

// NewMockFreteRapidoQuotesRepository creates a new instance of MockFreteRapidoQuotesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFreteRapidoQuotesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFreteRapidoQuotesRepository {
	mock := &MockFreteRapidoQuotesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFreteRapidoQuotesRepository is an autogenerated mock type for the FreteRapidoQuotesRepository type
type MockFreteRapidoQuotesRepository struct {
	mock.Mock
}

type MockFreteRapidoQuotesRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFreteRapidoQuotesRepository) EXPECT() *MockFreteRapidoQuotesRepository_Expecter {
	return &MockFreteRapidoQuotesRepository_Expecter{mock: &_m.Mock}
}

// TryQuote provides a mock function for the type MockFreteRapidoQuotesRepository
func (_mock *MockFreteRapidoQuotesRepository) TryQuote(context1 context.Context, requestQuote quotes.RequestQuote) (quotes.ResponseQuote, error) {
	ret := _mock.Called(context1, requestQuote)

	if len(ret) == 0 {
		panic("no return value specified for TryQuote")
	}

	var r0 quotes.ResponseQuote
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, quotes.RequestQuote) (quotes.ResponseQuote, error)); ok {
		return returnFunc(context1, requestQuote)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, quotes.RequestQuote) quotes.ResponseQuote); ok {
		r0 = returnFunc(context1, requestQuote)
	} else {
		r0 = ret.Get(0).(quotes.ResponseQuote)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, quotes.RequestQuote) error); ok {
		r1 = returnFunc(context1, requestQuote)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFreteRapidoQuotesRepository_TryQuote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TryQuote'
type MockFreteRapidoQuotesRepository_TryQuote_Call struct {
	*mock.Call
}

// TryQuote is a helper method to define mock.On call
//   - context1 context.Context
//   - requestQuote quotes.RequestQuote
func (_e *MockFreteRapidoQuotesRepository_Expecter) TryQuote(context1 interface{}, requestQuote interface{}) *MockFreteRapidoQuotesRepository_TryQuote_Call {
	return &MockFreteRapidoQuotesRepository_TryQuote_Call{Call: _e.mock.On("TryQuote", context1, requestQuote)}
}

func (_c *MockFreteRapidoQuotesRepository_TryQuote_Call) Run(run func(context1 context.Context, requestQuote quotes.RequestQuote)) *MockFreteRapidoQuotesRepository_TryQuote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 quotes.RequestQuote
		if args[1] != nil {
			arg1 = args[1].(quotes.RequestQuote)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFreteRapidoQuotesRepository_TryQuote_Call) Return(responseQuote quotes.ResponseQuote, err error) *MockFreteRapidoQuotesRepository_TryQuote_Call {
	_c.Call.Return(responseQuote, err)
	return _c
}

func (_c *MockFreteRapidoQuotesRepository_TryQuote_Call) RunAndReturn(run func(context1 context.Context, requestQuote quotes.RequestQuote) (quotes.ResponseQuote, error)) *MockFreteRapidoQuotesRepository_TryQuote_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClickhouseQuotesRepository creates a new instance of MockClickhouseQuotesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClickhouseQuotesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClickhouseQuotesRepository {
	mock := &MockClickhouseQuotesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClickhouseQuotesRepository is an autogenerated mock type for the ClickhouseQuotesRepository type
type MockClickhouseQuotesRepository struct {
	mock.Mock
}

type MockClickhouseQuotesRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClickhouseQuotesRepository) EXPECT() *MockClickhouseQuotesRepository_Expecter {
	return &MockClickhouseQuotesRepository_Expecter{mock: &_m.Mock}
}

// CreateQuote provides a mock function for the type MockClickhouseQuotesRepository
func (_mock *MockClickhouseQuotesRepository) CreateQuote(quote quotes.Quote) error {
	ret := _mock.Called(quote)

	if len(ret) == 0 {
		panic("no return value specified for CreateQuote")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(quotes.Quote) error); ok {
		r0 = returnFunc(quote)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClickhouseQuotesRepository_CreateQuote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateQuote'
type MockClickhouseQuotesRepository_CreateQuote_Call struct {
	*mock.Call
}

// CreateQuote is a helper method to define mock.On call
//   - quote quotes.Quote
func (_e *MockClickhouseQuotesRepository_Expecter) CreateQuote(quote interface{}) *MockClickhouseQuotesRepository_CreateQuote_Call {
	return &MockClickhouseQuotesRepository_CreateQuote_Call{Call: _e.mock.On("CreateQuote", quote)}
}

func (_c *MockClickhouseQuotesRepository_CreateQuote_Call) Run(run func(quote quotes.Quote)) *MockClickhouseQuotesRepository_CreateQuote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 quotes.Quote
		if args[0] != nil {
			arg0 = args[0].(quotes.Quote)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClickhouseQuotesRepository_CreateQuote_Call) Return(err error) *MockClickhouseQuotesRepository_CreateQuote_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClickhouseQuotesRepository_CreateQuote_Call) RunAndReturn(run func(quote quotes.Quote) error) *MockClickhouseQuotesRepository_CreateQuote_Call {
	_c.Call.Return(run)
	return _c
}
